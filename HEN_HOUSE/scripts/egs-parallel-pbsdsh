#!/bin/bash

### help function
function help {
    log "HELP"
    cat <<EOF

    usage:

        $(basename $0) queue nthread delay first basename 'command' ['others'] [verbose]

    arguments:

        queue       queue name on the pbs scheduler
        nthread     number of threads to use (number of jobs)
        delay       delay in seconds between individual jobs
        first       first job index
        basename    simulation input file name, without ".egsinp" extension
        command     command to run, in quotes
        others      other options passed to scheduler, in quotes
        verbose     echo detailed egs-parallel log messages to terminal

    note:

        This script is not meant to be called directly, but rather via the
        egs-parallel script with the batch option "-b pbsdsh"

EOF
}

### timestamp function
function timestamp {
    printf "EGSnrc egs-parallel $(date -u "+%Y-%m-%d (UTC) %H:%M:%S.%N")"
}

### log function to write messages to log file and standard output
function log {
    msg="$(timestamp): $1\n"
    printf "$msg" >&3
    if [ "$verbosity" = "verbose" ]; then
        printf "$msg"
    fi
}

### quit function for errors, with source, line, message and command
function quit {
    lineno=$1
    msg=$2
    case $3 in
        help)  cmd="help";;
        *)     cmd="";;
    esac
    verbosity="verbose"
    log "$0 line $lineno: $msg"; $cmd; log "QUIT."; exit 1
}

### parse command-line arguments (simplistic)
args_min=6
if [ "$#" -lt $args_min ]; then
    exec 3>/dev/null
    quit $LINENO "only $# arguments provided; at least $args_min required" help
fi
queue=$1
nthread=$2
delay=$3
first=$4
basename=$5
command=$6
scheduler_options=$7
verbosity=$8

### link file descriptor 3 to egs-parallel log file
exec 3>>$basename.egsparallel

### begin script
log "BEGIN $0"

### set scheduler job name (maximum 14 characters)
jobname=$(echo ${basename}[$nthread])
trim=$(( $(echo $jobname | wc -c) - 14 ))
if [ $trim -gt 0 ]; then
    jobname=$(echo $jobname | cut -c $trim-)
fi
log "job name: $jobname"

### create pbsdsh directory to store task files for job numbers
pbsdsh_dir=$basename.pbsdsh
log "create temporary directory $pbsdsh_dir"
if [ -e $pbsdsh_dir ]; then
    /bin/rm -r $pbsdsh_dir
fi
err=$(mkdir $pbsdsh_dir 2>&1)
if ! [ -z $err ]; then
    quit $LINENO "$err"
fi
### launch pbsdsh tasks
task_script=$HEN_HOUSE/scripts/egs-parallel-dshtask
jobpid=$(qsub -q $queue $scheduler_options <<EOF
#!/bin/sh
#PBS -j eo
#PBS -e ${basename}.eo
#PBS -N $jobname
#PBS -l select=$nthread:ncpus=1
#PBS -v HEN_HOUSE,EGS_HOME,EGS_CONFIG,PATH
pbsdsh $task_script $pbsdsh_dir $basename $nthread $first $delay '$command'
EOF
)
log "SUBMIT $nthread pbsdsh tasks on $jobid"
log "pbsdsh task logs will be collated in ${basename}.eo"

### print pid
printf "$jobpid\n"
